=====
5.3.0
=====

:right:`2024-08-06`

.. highlight:: typescript

.. rst-class:: release-notes

BREAKING
========

.. code-block::
  :caption: squared.base

  class Node {
      toFloat(attr: CssStyleAttr, fallback?: number, options?: CssInitialOptions): number; // Uses Node.valueOf without options
      toInt(attr: CssStyleAttr, fallback?: number, options?: CssInitialOptions): number;
      get plainText(): boolean; // Set in the constructor
  }

  class NodeUI {
      get textIndent(): number; // Detection for "each-line" and "hanging"
      get plainText(): boolean; // Modifiable using NodeUI.setCacheState
  }

.. code-block::
  :caption: squared.lib.client
  :emphasize-lines: 4

  interface UserAgentData {
      name: "Chrome";

      name: "Chrome" | "Chromium"; // getUserAgentData
  }

ADDED
=====

.. code-block::
  :caption: squared

  interface FileActionConfig {
      inherit?: boolean | "append" | "preserve"; // "preserve"
      dataSource?: DataSource | DataSource[];
  }

.. code-block::
  :caption: squared.base

  interface ControllerSettingsStyleUI {
      inputFontSize?: string;
      buttonFontSize?: string;
      textareaFontSize?: string;
      selectFontSize?: string;
      h1FontSize?: string;
      h2FontSize?: string;
      h3FontSize?: string;
      h4FontSize?: string;
      h5FontSize?: string;
      h6FontSize?: string;
      rtFontSize?: string;
  }

  interface ExcludeOptions {
      optimization?: number;
  }

  interface AutoMargin {
      leftRightAnchor?: boolean;
      topBottomAnchor?: boolean;
  }

  interface HasOptions {
      inherit?: boolean;
  }

  interface HasUnitOptions {
      not?: string | string[];
  }

  class Node {
      resetCache(): void;
      resetState(): void;
      get leftPos(): number;
      get rightPos(): number;
      get nowrapWhiteSpace(): boolean;
  }

  class NodeUI {
      static baselineElement(node: NodeUI): boolean;
      actualRect(position: PositionAttr, dimension?: BoxType): number; // Formerly abstract
      getPositionOffset(name: "sticky"): Point;
      hasFixedDimension(dimension: DimensionAttr): boolean;
      hasOptimization(value: number): boolean;
      get afterLineBreak(): boolean;
      get wordSpacing(): number;
  }

.. code-block::
  :caption: squared.base.lib

  /* constant */

  enum STAGE_OPTIMIZATION {
      EXCLUDE = 1,
      MERGE = 2,
      CONTAINER = 4,
      ALIGNMENT = 8,
      POSITION = 16,
      DIMENSION = 32,
      MARGIN = 64,
      PADDING = 128,
      BASELINE = 256,
      WHITESPACE = 512,
      TRANSLATE = 1024,
      TRANSFORM = 2048,
      SCALING = 4096
  }

  /* dom */

  function causesLineBreak(element: Element): boolean;

.. code-block::
  :caption: squared.lib

  /* client */

  interface UserAgentFeatures {
      RULES: {
          ADOPTED_STYLE_SHEET: boolean;
      };
  }

  /* color */

  type ColorOut = "rgb" | "hsl" | "hwb";
  type ColorSRGB = "srgb" | "srgb-linear";
  type ColorLAB = "lab" | "lch" | "oklab" | "oklch";
  type ColorXYZ = "xyz" | "xyz-d50" | "xyz-d65";
  type ColorCoords = ColorSRGB | ColorLAB | ColorXYZ | "a98-rgb" | "prophoto-rgb" | "display-p3" | "rec2020";
  type ColorCoordinates = [number, number, number];

  interface ColorRGB {
      to(name: ColorCoords): ColorCoordinates | null;
      toString(name?: ColorCoords | ColorOut, alpha?: number | null, precision?: number): string;
      get srgb: ColorCoordinates;
      get "srgb-linear"(): ColorCoordinates;
      get xyz: ColorCoordinates;
      get "xyz-d50"(): ColorCoordinates;
      get "xyz-d65"(): ColorCoordinates;
      get lab(): ColorCoordinates;
      get lch(): ColorCoordinates;
      get oklab(): ColorCoordinates;
      get oklch(): ColorCoordinates;
  }

  function formatCoords(name: string, values: ColorCoordinates, alpha?: number, precision?: number): string;
  function setPrecision(value: number): void;

  /* css */

  function roundPx(value: number, min?: number, precision?: number): string;

  /* dom */

  interface BoxRectDimension {
      columns?: Dimension[] | null; // getRangeClientRect
  }

.. code-block::
  :caption: android.base

  interface ExtensionComposeViewElement {
      selector?: string;
      android?: Record<string, string>;
      app?: Record<string, string>;
      tools?: Record<string, string>;
  }

.. code-block::
  :caption: android.lib.constant

  const LAYOUT_RELATIVE: string[];
  const LAYOUT_CONSTRAINT: string[];

.. code-block::
  :caption: chrome.base

  interface DocumentOutput {
      removeBinaries?: boolean;
  }

  interface FileActionAttribute {
      saveAs?: {
          video?: SaveAsOptions;
          audio?: SaveAsOptions;
          raw?: SaveAsOptions;
      };
  }

CHANGED
=======

.. code-block::
  :caption: squared

  function toString(projectId?: string): string; // projectId

.. code-block::
  :caption: squared.base

  interface HasOptions {
      type?: number; // CSS_UNIT.DECIMAL | CSS_UNIT.INTEGER
  }

  interface CacheStateUI {
      plainText?: boolean; // Relocated from CacheState
      firstLineStyle?: CssStyleMap | null;
      firstLetterStyle?: CssStyleMap | null;
      flowChildren?: NodeUI[];
      extensions?: string[];
      causesLineBreak?: boolean; // Relocated from CacheValueUI
  }

  class Node {
      get dir(): TextDirection; // "ltr" | "rtl" | ""
  }

.. code-block::
  :caption: squared.lib.color

  interface ColorRGB {
      get scheme(): "light" | "dark" | ""; // readonly

      set scheme(value);
  }

  function convertHSLA(value: RGB, opacity?: number): HSLA; // opacity
  function convertHWBA(value: RGB, opacity?: number): HWBA;
  function convertRGBA(value: HSL | HWB, opacity?: number): RGBA;

.. code-block::
  :caption: android.base

  interface ExtensionComposeViewElement {
      selector?: string;
      android?: Record<string, string>;
      app?: Record<string, string>;
      tools?: Record<string, string>;
  }

  interface View {
      setLayoutPercent(value: number | string, horizontal?: boolean, includeMargin?: boolean): void; // includeMargin
  }

DEPRECATED
==========

.. code-block::
  :caption: squared.base

  interface ControllerSettingsStyleUI {
      formFontSize: string;
  }

  class ApplicationUI {
      get layouts(): FileAsset[]; // ApplicationUI.getProject().layouts
  }

.. code-block::
  :caption: squared.base.lib.regex

  const CSS: {
      ANGLE_G: RegExp;
      BACKGROUNDIMAGE_G: RegExp;
  };
  const DOM: {
      ENTITY_G: RegExp;
      AMPERSAND_G: RegExp;
  };

.. code-block::
  :caption: squared.lib

  /* color */

  interface ColorRGB {
      get hslaAsString(): string; // toString("hsl", 1)
      get rgbAsString(): string; // toString("rgb")
      get hslAsString(): string; // toString("hsl")
      get hwbAsString(): string; // toString("hwb")
  }

  function formatHSLA(value: HSL, precision?: number): string; // formatHSL

  /* css */

  function formatPX(value: number): string; // roundPx

  /* error */

  const FRAMEWORK_NOT_INSTALLED: string; // squared.lib.internal.MESSAGE
  const SERVER_REQUIRED: string;
  const DIRECTORY_NOT_PROVIDED: string;
  const UNABLE_TO_FINALIZE_DOCUMENT: string;
  const INVALID_ASSET_REQUEST: string;
  const OPERATION_NOT_SUPPORTED: string;
  const ELEMENT_NOT_FOUND: string;
  const CSS_CANNOT_BE_PARSED: string;

  /* regex */

  const CSS: {
      SELECTOR_G: RegExp;
  };

.. code-block::
  :caption: android.lib.constant

  const LAYOUT_ALIGNMENT: string[]; // LAYOUT_RELATIVE
  const LAYOUT_ALIGNMENT_APP: string[]; // LAYOUT_CONSTRAINT